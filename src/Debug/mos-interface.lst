Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED01-Mar-23     16:29:18     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:		AGON MOS - MOS assembly interfa
                           A     3    ; Author:		Jeroen Venema
                           A     4    ; Created:		15/10/2022
                           A     5    ; Last Updated:	23/02/2023
                           A     6    ; 
                           A     7    ; Modinfo:
                           A     8    ; 15/10/2022:		Added _putch, _getch
                           A     9    ; 21/10/2022:		Added _puts
                           A    10    ; 22/10/2022:		Added _waitvblank, _mos_f* 
                           A    11    ; 26/11/2022:       __putch, changed default ro
                           A    12    ; 10/01/2023:		Added _getsysvar_cursorX/Y 
                           A    13    ; 23/02/2023:		Added _mos_save and _mos_de
                           B     0    	.include "mos_api.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	24/09/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    
                           B    14    ; MOS high level functions
                           B    15    ;
       00000000            B    16    mos_getkey:		EQU	00h
       00000001            B    17    mos_load:		EQU	01h
       00000002            B    18    mos_save:		EQU	02h
       00000003            B    19    mos_cd:			EQU	03h
       00000004            B    20    mos_dir:		EQU	04h
       00000005            B    21    mos_del:		EQU	05h
       00000006            B    22    mos_ren:		EQU	06h
       00000007            B    23    mos_mkdir:		EQU	07h
       00000008            B    24    mos_sysvars:		EQU	08h
       00000009            B    25    mos_editline:		EQU	09h
       0000000A            B    26    mos_fopen:		EQU	0Ah
       0000000B            B    27    mos_fclose:		EQU	0Bh
       0000000C            B    28    mos_fgetc:		EQU	0Ch
       0000000D            B    29    mos_fputc:		EQU	0Dh
       0000000E            B    30    mos_feof:		EQU	0Eh
       0000000F            B    31    mos_getError:		EQU	0Fh
                           B    32    
                           B    33    ; FatFS file access functions
                           B    34    ;
       00000080            B    35    ffs_fopen:		EQU	80h
       00000081            B    36    ffs_fclose:		EQU	81h
       00000082            B    37    ffs_fread:		EQU	82h
       00000083            B    38    ffs_fwrite:		EQU	83h
       00000084            B    39    ffs_fseek:		EQU	84h
       00000085            B    40    ffs_ftruncate:		EQU	85h
       00000086            B    41    ffs_fsync:		EQU	86h
       00000087            B    42    ffs_fforward:		EQU	87h
       00000088            B    43    ffs_fexpand:		EQU	88h
       00000089            B    44    ffs_fgets:		EQU	89h
       0000008A            B    45    ffs_fputc:		EQU	8Ah
       0000008B            B    46    ffs_fputs:		EQU	8Bh
       0000008C            B    47    ffs_fprintf:		EQU	8Ch
       0000008D            B    48    ffs_ftell:		EQU	8Dh
       0000008E            B    49    ffs_feof:		EQU	8Eh
       0000008F            B    50    ffs_fsize:		EQU	8Fh
       00000090            B    51    ffs_ferror:		EQU	90h
                           B    52    
                           B    53    ; FatFS directory access functions
                           B    54    ;
       00000091            B    55    ffs_dopen:		EQU	91h
       00000092            B    56    ffs_dclose:		EQU	92h
       00000093            B    57    ffs_dread:		EQU	93h
       00000094            B    58    ffs_dfindfirst:		EQU	94h
       00000095            B    59    ffs_dfindnext:		EQU	95h
                           B    60    
                           B    61    ; FatFS file and directory management functions
                           B    62    ;
       00000096            B    63    ffs_stat:		EQU	96h
       00000097            B    64    ffs_unlink:		EQU	97h
       00000098            B    65    ffs_rename:		EQU	98h
       00000099            B    66    ffs_chmod:		EQU	99h
       0000009A            B    67    ffs_utime:		EQU	9Ah
       0000009B            B    68    ffs_mkdir:		EQU	9Bh
       0000009C            B    69    ffs_chdir:		EQU	9Ch
       0000009D            B    70    ffs_chdrive:		EQU	9Dh
       0000009E            B    71    ffs_getcwd:		EQU	9Eh
                           B    72    
                           B    73    ; FatFS volume management and system configurat
                           B    74    ;
       0000009F            B    75    ffs_mount:		EQU	9Fh
       000000A0            B    76    ffs_mkfs:		EQU	A0h
       000000A1            B    77    ffs_fdisk		EQU	A1h
       000000A2            B    78    ffs_getfree:		EQU	A2h
       000000A3            B    79    ffs_getlabel:		EQU	A3h
       000000A4            B    80    ffs_setlabel:		EQU	A4h
       000000A5            B    81    ffs_setcp:		EQU	A5h
                           B    82    	
                           B    83    ; File access modes
                           B    84    ;
       00000001            B    85    fa_read:		EQU	01h
       00000002            B    86    fa_write:		EQU	02h
       00000000            B    87    fa_open_existing:	EQU	00h
       00000004            B    88    fa_create_new:		EQU	04h
       00000008            B    89    fa_create_always:	EQU	08h
       00000010            B    90    fa_open_always:		EQU	10h
       00000030            B    91    fa_open_append:		EQU	30h
                           B    92    	
                           B    93    ; System variable indexes for api_sysvars
                           B    94    ; Index into _sysvars in globals.asm
                           B    95    ;
       00000000            B    96    sysvar_time:		EQU	00h
       00000004            B    97    sysvar_vpd_pflags:	EQU	04h
       00000005            B    98    sysvar_keycode:		EQU	05h
       00000006            B    99    sysvar_keymods:		EQU	06h
       00000007            B   100    sysvar_cursorX:		EQU	07h
       00000008            B   101    sysvar_cursorY:		EQU	08h
       00000009            B   102    sysvar_scrchar:		EQU	09h
       0000000A            B   103    sysvar_scrpixel:	EQU	0Ah
       0000000D            B   104    sysvar_audioChannel:	EQU	0Dh
       0000000E            B   105    syscar_audioSuccess:	EQU	0Eh
                           B   106    	
                           B   107    ; Flags for the VPD protocol
                           B   108    ;
       00000001            B   109    vdp_pflag_cursor:	EQU		00000001b
       00000002            B   110    vdp_pflag_scrchar:	EQU		00000010b
       00000004            B   111    vdp_pflag_point:	EQU		00000100b
       00000008            B   112    vdp_pflag_audio:	EQU		00001000b
       00000010            B   113    vdp_pflag_mode:		EQU		00010000b
                           B   114    	
                           B   115    ;
                           B   116    ; Macro for calling the API
                           B   117    ; Parameters:
                           B   118    ; - function: One of the function numbers liste
                           B   119    ;
                           B   120    MOSCALL:		MACRO	function
                           B   121    			LD	A, function
                           B   122    			RST.LIS	08h
                           B   123    			ENDMACRO 	
                           A    15    
                           A    16    	XDEF _putch
                           A    17    	XDEF __putch
                           A    18    	XDEF _getch
                           A    19    	;XDEF _puts
                           A    20    	XDEF _waitvblank
                           A    21    	XDEF _mos_fopen
                           A    22    	XDEF _mos_fclose
                           A    23    	XDEF _mos_fgetc
                           A    24    	XDEF _mos_fputc
                           A    25    	XDEF _mos_feof
                           A    26    	XDEF _mos_save
                           A    27    	XDEF _mos_del
                           A    28    	XDEF _getsysvar_cursorX
                           A    29    	XDEF _getsysvar_cursorY
                           A    30    	XDEF _getsysvar_scrchar
                           A    31    	XDEF _mos102_setvector_fingerprint
                           A    32    	
                           A    33    	segment CODE
                           A    34    	.assume ADL=1
                           A    35    	
040342                     A    36    _putch:
040342                     A    37    __putch:
040342 DDE5                A    38    	push 	ix
040344 DD210000 00         A    39    	ld 		ix,0
040349 DD39                A    40    	add 	ix, sp
04034B DD7E06              A    41    	ld 		a, (ix+6)
04034E 5BD7                A    42    	rst.lil	10h
040350 21000000            A    43    	ld		hl,0
040354 6F                  A    44    	ld		l,a
040355 DDF9                A    45    	ld		sp,ix
040357 DDE1                A    46    	pop		ix
040359 C9                  A    47    	ret
                           A    48    
04035A                     A    49    _getch:
04035A DDE5                A    50    	push ix
04035C 3E08                A    51    	ld a, mos_sysvars			; MOS Call for 
04035E 5BCF                A    52    	rst.lil 08h					; returns point
040360                     A    53    _getch0:
040360 DD7E05              A    54    	ld a, (ix+sysvar_keycode)	; get current k
040363 B7                  A    55    	or a,a
040364 28 FA               A    56    	jr z, _getch0				; wait for keyp
                           A    57    	
040366 F5                  A    58    	push af						; debounce key,
040367 AF                  A    59    	xor a
040368 DD7705              A    60    	ld (ix+sysvar_keycode),a
04036B F1                  A    61    	pop af
04036C DDE1                A    62    	pop ix
04036E C9                  A    63    	ret
                           A    64    
04036F                     A    65    _waitvblank:
04036F DDE5                A    66    	push ix
040371 3E08                A    67    	ld a, mos_sysvars
040373 5BCF                A    68    	rst.lil 08h
040375 DD7E00              A    69    	ld a, (ix + sysvar_time + 0)
040378 DDBE00              A    70    $$:	cp a, (ix + sysvar_time + 0)
04037B 28 FB               A    71    	jr z, $B
04037D DDE1                A    72    	pop ix
04037F C9                  A    73    	ret
                           A    74    
                           A    75    
040380                     A    76    _getsysvar_cursorX:
040380 DDE5                A    77    	push ix
040382 3E08                A    78    	ld a, mos_sysvars			; MOS Call for 
040384 5BCF                A    79    	rst.lil 08h					; returns point
040386 DD7E07              A    80    	ld a, (ix+sysvar_cursorX)	; get current k
040389 DDE1                A    81    	pop ix
04038B C9                  A    82    	ret
                           A    83    
04038C                     A    84    _getsysvar_cursorY:
04038C DDE5                A    85    	push ix
04038E 3E08                A    86    	ld a, mos_sysvars			; MOS Call for 
040390 5BCF                A    87    	rst.lil 08h					; returns point
040392 DD7E08              A    88    	ld a, (ix+sysvar_cursorY)	; get current k
040395 DDE1                A    89    	pop ix
040397 C9                  A    90    	ret
                           A    91    
040398                     A    92    _getsysvar_scrchar:
040398 DDE5                A    93    	push ix
04039A 3E08                A    94    	ld a, mos_sysvars			; MOS Call for 
04039C 5BCF                A    95    	rst.lil 08h					; returns point
04039E DD7E09              A    96    	ld a, (ix+sysvar_scrchar)	; get current k
0403A1 DDE1                A    97    	pop ix
0403A3 C9                  A    98    	ret
                           A    99    
0403A4                     A   100    _mos_fopen:
0403A4 DDE5                A   101    	push ix
0403A6 DD210000 00         A   102    	ld ix,0
0403AB DD39                A   103    	add ix, sp
                           A   104    	
0403AD DD2706              A   105    	ld hl, (ix+6)	; address to 0-terminated f
0403B0 DD4E09              A   106    	ld c,  (ix+9)	; mode : fa_read / fa_write
0403B3 3E0A                A   107    	ld a, mos_fopen
0403B5 5BCF                A   108    	rst.lil 08h		; returns filehandle in A
                           A   109    	
0403B7 DDF9                A   110    	ld sp,ix
0403B9 DDE1                A   111    	pop ix
0403BB C9                  A   112    	ret	
                           A   113    
0403BC                     A   114    _mos_fclose:
0403BC DDE5                A   115    	push ix
0403BE DD210000 00         A   116    	ld ix,0
0403C3 DD39                A   117    	add ix, sp
                           A   118    	
0403C5 DD4E06              A   119    	ld c, (ix+6)	; filehandle, or 0 to close
0403C8 3E0B                A   120    	ld a, mos_fclose
0403CA 5BCF                A   121    	rst.lil 08h		; returns number of files s
                           A   122    	
0403CC DDF9                A   123    	ld sp,ix
0403CE DDE1                A   124    	pop ix
0403D0 C9                  A   125    	ret	
                           A   126    
0403D1                     A   127    _mos_fgetc:
0403D1 DDE5                A   128    	push ix
0403D3 DD210000 00         A   129    	ld ix,0
0403D8 DD39                A   130    	add ix, sp
                           A   131    	
0403DA DD4E06              A   132    	ld c, (ix+6)	; filehandle
0403DD 3E0C                A   133    	ld a, mos_fgetc
0403DF 5BCF                A   134    	rst.lil 08h		; returns character in A
                           A   135    	
0403E1 DDF9                A   136    	ld sp,ix
0403E3 DDE1                A   137    	pop ix
0403E5 C9                  A   138    	ret	
                           A   139    
0403E6                     A   140    _mos_fputc:
0403E6 DDE5                A   141    	push ix
0403E8 DD210000 00         A   142    	ld ix,0
0403ED DD39                A   143    	add ix, sp
                           A   144    	
0403EF DD4E06              A   145    	ld c, (ix+6)	; filehandle
0403F2 DD4609              A   146    	ld b, (ix+9)	; character to write
0403F5 3E0D                A   147    	ld a, mos_fputc
0403F7 5BCF                A   148    	rst.lil 08h		; returns nothing
                           A   149    	
0403F9 DDF9                A   150    	ld sp,ix
0403FB DDE1                A   151    	pop ix
0403FD C9                  A   152    	ret	
                           A   153    
0403FE                     A   154    _mos_feof:
0403FE DDE5                A   155    	push ix
040400 DD210000 00         A   156    	ld ix,0
040405 DD39                A   157    	add ix, sp
                           A   158    	
040407 DD4E06              A   159    	ld c, (ix+6)	; filehandle
04040A 3E0E                A   160    	ld a, mos_feof
04040C 5BCF                A   161    	rst.lil 08h		; returns A: 1 at End-of-Fi
                           A   162    	
04040E DDF9                A   163    	ld sp,ix
040410 DDE1                A   164    	pop ix
040412 C9                  A   165    	ret	
                           A   166    
                           A   167    
040413                     A   168    _mos_del:
040413 DDE5                A   169    	push	ix
040415 DD210000 00         A   170    	ld 		ix,0
04041A DD39                A   171    	add 	ix, sp
                           A   172    
04041C DD2706              A   173    	ld 		hl, (ix+6)	; filename address (zer
04041F 3E05                A   174    	ld a,	mos_del
040421 5BCF                A   175    	rst.lil	08h			; save file to SD card
                           A   176    
040423 DDF9                A   177    	ld		sp,ix
040425 DDE1                A   178    	pop		ix
040427 C9                  A   179    	ret
                           A   180    	
040428                     A   181    _mos_save:
040428 DDE5                A   182    	push	ix
04042A DD210000 00         A   183    	ld 		ix,0
04042F DD39                A   184    	add 	ix, sp
                           A   185    
040431 DD2706              A   186    	ld 		hl, (ix+6)	; filename address (zer
040434 DD1709              A   187    	ld		de, (ix+9)	; address to save from
040437 DD070C              A   188    	ld		bc, (ix+12)	; number of bytes to sa
04043A 3E02                A   189    	ld a,	mos_save
04043C 5BCF                A   190    	rst.lil	08h			; save file to SD card
                           A   191    
04043E DDF9                A   192    	ld		sp,ix
040440 DDE1                A   193    	pop		ix
040442 C9                  A   194    	ret
                           A   195    
                           A   196    	SEGMENT DATA
046727                     A   197    _mos102_setvector_fingerprint:
046727 FDE5FD21 000000FD   A   198    	DB FDh,E5h,FDh,21h,00h,00h,00h,FDh,39h,F5h,
04672F 39F5ED57 F5F30100 
046737 00000602 FD4E06ED 
04673F 4C21 
                           A   199    
                           A   200    end


Errors: 0
Warnings: 0
Lines Assembled: 324
