; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\filestack.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",16
.DEFINE "reg"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "reg_index"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "indirect"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cc"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cc_index"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "displacement"
.VALUE 7
.CLASS 8
.TYPE 3
.ENDEF
.DEFINE "displacement_provided"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "immediate_provided"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "immediate"
.VALUE 11
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "wasLabel"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",4
.DEFINE "suffix"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "prefix1"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "prefix2"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "opcode"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",16
.DEFINE "operandA"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "operandB"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ddfdpermitted"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "transformA"
.VALUE 7
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "transformB"
.VALUE 10
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "prefix"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "opcode"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "adl"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",17
.DEFINE "name"
.VALUE 0
.CLASS 8
.DIM 8
.TYPE 98
.ENDEF
.DEFINE "type"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "asmtype"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "listnumber"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "list"
.VALUE 11
.CLASS 8
.TAG "NONAME2"
.TYPE 40
.ENDEF
.DEFINE "asmargument"
.VALUE 14
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",6
.DEFINE "type"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "match"
.VALUE 3
.CLASS 8
.TYPE 556
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",264
.DEFINE "current_instruction"
.VALUE 0
.CLASS 8
.TAG "NONAME3"
.TYPE 40
.ENDEF
.DEFINE "next"
.VALUE 3
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "label"
.VALUE 6
.CLASS 8
.DIM 32
.TYPE 98
.ENDEF
.DEFINE "mnemonic"
.VALUE 38
.CLASS 8
.DIM 16
.TYPE 98
.ENDEF
.DEFINE "suffix"
.VALUE 54
.CLASS 8
.DIM 16
.TYPE 98
.ENDEF
.DEFINE "operand1"
.VALUE 70
.CLASS 8
.DIM 32
.TYPE 98
.ENDEF
.DEFINE "operand2"
.VALUE 102
.CLASS 8
.DIM 32
.TYPE 98
.ENDEF
.DEFINE "comment"
.VALUE 134
.CLASS 8
.DIM 128
.TYPE 98
.ENDEF
.DEFINE "size"
.VALUE 262
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",131
.DEFINE "linenumber"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "fp"
.VALUE 2
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "filename"
.VALUE 3
.CLASS 8
.DIM 128
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",261
.DEFINE "start"
.VALUE 0
.CLASS 8
.DIM 256
.TYPE 98
.ENDEF
.DEFINE "length"
.VALUE 256
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "next"
.VALUE 257
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "terminator"
.VALUE 260
.CLASS 8
.TYPE 2
.ENDEF
.ENDREC "NONAME7"
	SEGMENT BSS
__filestack:
	DS	524
.DEFINE "_filestack"
.ALIAS "__filestack"
.CLASS 83
.VALUE __filestack
.DIM 4
.TAG "NONAME6"
.TYPE 104
.ENDEF
__filestackCount:
	DS	1
.DEFINE "_filestackCount"
.ALIAS "__filestackCount"
.CLASS 83
.VALUE __filestackCount
.TYPE 12
.ENDEF
;    1	#include <string.h>
;    2	#include "filestack.h"
;    3	#include "utils.h"
;    4	
;    5	filestackitem _filestack[FILESTACK_MAXFILES];
;    6	uint8_t       _filestackCount;
	SEGMENT CODE
;    7	
;    8	void filestackInit(void) {
_filestackInit:
.DEFINE "_filestackInit"

.VALUE _filestackInit

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "filestackInit",8,"_filestackInit"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;    9	    _filestackCount = 0;
.LINE 9

	XOR	A,A
	LD	(__filestackCount),A
;   10	}
.LINE 10

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filestackInit ***************************
;Name                         Addr/Register   Size   Type
;__filestackCount                    STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filestackInit",10,"_filestackInit"
;   11	
;   12	uint8_t filestackCount(void) {
_filestackCount:
.DEFINE "_filestackCount"

.VALUE _filestackCount

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "filestackCount",12,"_filestackCount"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   13	    return _filestackCount;
.LINE 13

	LD	A,(__filestackCount)
;   14	}
.LINE 14

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filestackCount ***************************
;Name                         Addr/Register   Size   Type
;__filestackCount                    STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filestackCount",14,"_filestackCount"
;   15	
;   16	bool filestackPush(filestackitem *fs) {
_filestackPush:
.DEFINE "_filestackPush"

.VALUE _filestackPush

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "filestackPush",16,"_filestackPush"

.LINE 16

.DEFINE "fs"

.CLASS 65

.VALUE 6

.TAG "NONAME6"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   17	    if(_filestackCount < FILESTACK_MAXFILES) {
.LINE 17

	LD	A,(__filestackCount)
	CP	A,%4
	JR	NC,L_4
;   18	        _filestack[_filestackCount].linenumber = fs->linenumber;
.LINE 18

	LD	A,(__filestackCount)
	UEXT	HL
	LD	L,A
	LD	A,%83
	CALL	__imul_b
	LD	BC,__filestack
	ADD	HL,BC
	LD	(IX+%FFFFFFFD),HL
	LD	IY,(IX+%6)
	LD	BC,(IY+%0)
	LD	IY,(IX+%FFFFFFFD)
	LD	(IY+%0),C
	LD	(IY+%1),B
;   19	        _filestack[_filestackCount].fp = fs->fp;
.LINE 19

	LD	IY,(IX+%6)
	LD	A,(IY+%2)
	LD	IY,(IX+%FFFFFFFD)
	LD	(IY+%2),A
;   20	        strcpy(_filestack[_filestackCount].filename,fs->filename);
.LINE 20

	LD	IY,(IX+%6)
	PEA	IY+%3
	LD	A,(__filestackCount)
	UEXT	HL
	LD	L,A
	LD	A,%83
	CALL	__imul_b
	LD	BC,__filestack
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+%3
	CALL	_strcpy
	POP	BC
	POP	BC
;   21	        _filestackCount++;
.LINE 21

	LD	A,(__filestackCount)
	INC	A
	LD	(__filestackCount),A
;   22	        return true;
.LINE 22

	LD	A,%1
	JR	L_6
;   23	    }
;   24	    else error(message[ERROR_MAXINCLUDEFILES]);
L_4:
.LINE 24

	LD	HL,_message+120
	LD	BC,(HL)
	PUSH	BC
	CALL	_error
	POP	BC
;   25	    return false;
.LINE 25

	XOR	A,A
;   26	}
L_6:
.LINE 26

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filestackPush ***************************
;Name                         Addr/Register   Size   Type
;_message                            IMPORT  unknown variable
;_error                              IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;__filestack                         STATIC    524   variable
;__filestackCount                    STATIC      1   variable
;fs                                    IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filestackPush",26,"_filestackPush"
;   27	
;   28	bool filestackPop(filestackitem *fs) {
_filestackPop:
.DEFINE "_filestackPop"

.VALUE _filestackPop

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "filestackPop",28,"_filestackPop"

.LINE 28

.DEFINE "fs"

.CLASS 65

.VALUE 6

.TAG "NONAME6"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   29	    if(_filestackCount) {
.LINE 29

	LD	A,(__filestackCount)
	OR	A,A
	JR	Z,L_9
;   30	        _filestackCount--;
.LINE 30

	LD	A,(__filestackCount)
	DEC	A
	LD	(__filestackCount),A
;   31	        fs->linenumber = _filestack[_filestackCount].linenumber;
.LINE 31

	UEXT	HL
	LD	L,A
	LD	A,%83
	CALL	__imul_b
	LD	BC,__filestack
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IY+%0)
	LD	IY,(IX+%6)
	LD	(IY+%0),C
	LD	(IY+%1),B
;   32	        fs->fp = _filestack[_filestackCount].fp;
.LINE 32

	LD	A,(__filestackCount)
	UEXT	HL
	LD	L,A
	LD	A,%83
	CALL	__imul_b
	LD	BC,__filestack
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+%2)
	LD	IY,(IX+%6)
	LD	(IY+%2),A
;   33	        strcpy(fs->filename, _filestack[_filestackCount].filename);
.LINE 33

	LD	A,(__filestackCount)
	UEXT	HL
	LD	L,A
	LD	A,%83
	CALL	__imul_b
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+%3
	LD	IY,(IX+%6)
	PEA	IY+%3
	CALL	_strcpy
	POP	BC
	POP	BC
;   34	        return true;
.LINE 34

	LD	A,%1
	JR	L_10
;   35	    }
L_9:
.LINE 35

;   36	    return false;
.LINE 36

	XOR	A,A
;   37	}
L_10:
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filestackPop ***************************
;Name                         Addr/Register   Size   Type
;_strcpy                             IMPORT  -----   function
;__filestack                         STATIC    524   variable
;__filestackCount                    STATIC      1   variable
;fs                                    IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filestackPop",37,"_filestackPop"
	XREF _error:ROM
	XREF _message:ROM
	XREF _strcpy:ROM
	XREF __imul_b:ROM
	XDEF _filestackPop
	XDEF _filestackPush
	XDEF _filestackCount
	XDEF _filestackInit
	XDEF __filestackCount
	XDEF __filestack
	END
